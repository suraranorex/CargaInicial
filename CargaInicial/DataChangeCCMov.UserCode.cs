///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////
using System.IO;
using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace PruebaConsola
{
    public partial class DataChangeCCMov
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void LanzaCargaDataChangeCCMov(string bat_ejecutar, string archivoSalida, string modulo)
        {
            // TODO: Replace the following line with your code implementation.
            //throw new NotImplementedException();
             Report.Info("Info","Ejecutando el proceso de DataChangeCC_MOV");
            Process p = new Process();
            ProcessStartInfo S = new ProcessStartInfo();
            
            p.StartInfo.FileName = "cmd.exe";
            string cmd1 = @"/C .\Utilitarios\lanzadorComunDataChangeCCMOV.bat ";
            string cmd2 = bat_a_ejecutar;
            string cmd3 = modulo;
            string cmd4 = archivoSalida;
            
            //p.StartInfo.Arguments = cmd1 + "\"" + cmd2 + "\"" + " > C:\\TEMP\\SalidaComando.txt";            
            p.StartInfo.Arguments = cmd1 +" "+ cmd2 +" "+ cmd3 +" "+ cmd4;
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;
            
            //p.StartInfo = S;
            p.Start();
            string output = p.StandardOutput.ReadToEnd();
            //string error = p.StandardOutput.ReadToEnd();
            p.WaitForExit();
            Report.Info("INFO: ",output);
        }

        public void VeridicaFinalDataChangeCCMOV(string Datos_Salida)
        {
            // TODO: Replace the following line with your code implementation.
            //throw new NotImplementedException();
            string aux = string.Empty;
            
           
            try{
            	
            	aux = File.ReadAllText(@".\Utilitarios\" + Datos_Salida);
            	
            	if (aux.Contains("Edit change ref=RVASINI publicId=cc:2"))
            		Report.Success("Info: ","El proceso DataChangeCCMOV finalizó correctamente");
            	else
            		Report.Error("Info: ","El proceso DataChangeCCMOV finalizo incorrectamente");
            
            }
            catch(Exception e){
            	Report.Failure("I/O","Error: No se encontró el archivo\r\n" + e);
            
            }
        }

    }
}
